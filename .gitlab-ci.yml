
image: "rust:latest"

stages:
  - check
  - test
  - deploy
  - publish
  - coverage
  - post-run


clean-code:
  stage: check
  script:
    - rustup default nightly
    - rustup update
    - rustup component add rustfmt-preview
    - cargo fmt --all -- --check
  allow_failure: true


check-gyrus:
  stage: check
  script:
    - rustup default nightly
    - rustup update
    - cargo check


unittests:
  stage: test
  script:
    - rustup default nightly
    - rustup update
    - cargo test --release

benchmarktests:
  stage: test
  script:
    - rustup default nightly
    - rustup update
    - cargo bench


# nightly-linux-optimized:
#   stage: deploy
#   cache: {}
#   script:
#     - apt-get update
#     - rustup default nightly
#     - rustup update
#     - (cd noughts-and-crosses-game && cargo build --release)
#     - (cd noughts-and-crosses-random-train && cargo build --release)
#     - (cd noughts-and-crosses-ai-test && cargo build --release)
#     - rm -r -f files
#     - mkdir files
#     - cp target/release/noughts-and-crosses-game files
#     - cp target/release/noughts-and-crosses-random-train files
#     - cp target/release/noughts-and-crosses-ai-test files
#   when: on_success
#   artifacts:
#     paths:
#       - files
#     expire_in: 2 weeks
#   only:
#     refs:
#       - master
#       - dev

# nightly-windows-optimized:
#   stage: deploy
#   cache: {}
#   script:
#     - apt-get update
#     - rustup default nightly
#     - rustup update
#     - apt-get install gcc -y
#     - apt-get install gcc-mingw-w64-x86-64 -y
#     - rustup component add rust-std --target=x86_64-pc-windows-gnu
#     - mkdir .cargo
#     - touch .cargo/config
#     - echo [target.x86_64-pc-windows-gnu] >> .cargo/config
#     - echo     linker = \"x86_64-w64-mingw32-gcc\" >> .cargo/config
#     - echo     ar = \"x86_64-w64-mingw32-gcc-ar\" >> .cargo/config
#     - (cd noughts-and-crosses-game && cargo build --release --target=x86_64-pc-windows-gnu)
#     - (cd noughts-and-crosses-random-train && cargo build --release --target=x86_64-pc-windows-gnu)
#     - (cd noughts-and-crosses-ai-test && cargo build --release --target=x86_64-pc-windows-gnu)
#     - rm -r -f files
#     - mkdir files
#     - cp target/x86_64-pc-windows-gnu/release/noughts-and-crosses-game.exe files
#     - cp target/x86_64-pc-windows-gnu/release/noughts-and-crosses-random-train.exe files
#     - cp target/x86_64-pc-windows-gnu/release/noughts-and-crosses-ai-test.exe files
#   when: on_success
#   artifacts:
#     paths:
#       - files
#     expire_in: 2 weeks
#   only:
#     refs:
#       - master
#       - dev

docs:
  stage: deploy
  script:
    - apt-get update
    - rustup default nightly
    - rustup update
    - cargo doc --no-deps
    - rm -r -f docs
    - mkdir docs
    - cp -R target/doc docs
  when: on_success
  artifacts:
    paths:
      - docs
    expire_in: 2 weeks
  only:
    refs:
      - master
      - dev

cratesio:
  stage: publish
  script:
    - rm -r -f docs
    - apt-get update
    - rustup default nightly
    - rustup update
    - cargo login $CARGO_LOGIN
    - cargo package
    - cargo publish
  when: on_success
  only:
    refs:
      - master
  allow_failure: true

Codecov:
  stage: coverage
  script:
    - apt-get update
    - apt-get install libcurl4-openssl-dev libelf-dev libdw-dev cmake gcc binutils-dev libiberty-dev -y
    - rustup default nightly
    - rustup update
    - cargo clean
    - cargo build
    - cargo test
    - wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz &&
    - tar xzf master.tar.gz &&
    - cd kcov-master &&
    - mkdir build &&
    - cd build &&
    - cmake .. &&
    - make &&
    - make install DESTDIR=../../kcov-build &&
    - cd ../.. &&
    - rm -rf kcov-master &&
    - for file in target/debug/gyrus-*[^\.d]; do mkdir -p "target/cov/$(basename $file)"; ./kcov-build/usr/local/bin/kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file"; done &&
    - bash <(curl -s https://codecov.io/bash) &&
    - echo "Uploaded code coverage"
  when: on_success
  allow_failure: true

clippy:
  stage: post-run
  script:
    - rustup default nightly
    - rustup update
    - rustup component add clippy-preview
    - cargo clippy --all -- -D clippy::all
  allow_failure: true
